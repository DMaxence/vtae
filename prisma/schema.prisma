// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  gh_username   String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?
  accounts      Account[]
  sessions      Session[]
  sites         Site[]
  posts         Post[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            String   @id @default(cuid())
  title         String?  @db.Text
  description   String?  @db.Text
  content       String?  @db.Text
  slug          String   @default(cuid())
  image         String?  @db.Text
  imageBlurhash String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  published     Boolean  @default(false)
  site          Site?    @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId        String?
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String?

  @@unique([slug, siteId])
  @@index([siteId])
  @@index([userId])
}

model Site {
  id            String         @id @default(cuid())
  name          String?
  description   String?        @db.Text
  logo          String?        @db.Text
  font          String         @default("font-cal")
  image         String?        @db.Text
  imageBlurhash String?        @db.Text
  subdomain     String?        @unique
  customDomain  String?        @unique
  message404    String?        @db.Text
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User?          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String?
  posts         Post[]
  experiences   Experience[]
  personalInfos PersonalInfos?
  educations    Education[]
  links         Link[]
  languages     Language[]
  skills        Skill[]
  theme         Theme?         @relation(fields: [themeId], references: [id])
  themeId       String?

  @@index([userId])
  @@index([themeId])
}

model PersonalInfos {
  id            String   @id @default(cuid())
  firstname     String?
  lastname      String?
  title         String?
  alias         String?
  about         String?  @db.Text
  location      String?
  currentWork   String?
  image         String?  @db.Text
  imageBlurhash String?  @db.LongText
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  site          Site?    @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId        String?  @unique
}

model Experience {
  id          String    @id @default(cuid())
  companyName String
  companyUrl  String?
  jobTitle    String
  description String    @db.Text
  location    String?
  skills      Skill[]
  startDate   DateTime  @db.Date
  endDate     DateTime? @db.Date
  type        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  site        Site?     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId      String?

  @@index([siteId], name: "experience_site_constraint")
}

model Skill {
  id          String       @id @default(cuid())
  name        String       @unique
  primary     Boolean      @default(false)
  type        String?
  siteId      String?
  experiences Experience[]
  site        Site?        @relation(fields: [siteId], references: [id])

  @@index([siteId])
  @@fulltext([name])
}

model Education {
  id String @id @default(cuid())

  place       String
  degree      String?
  degreeField String?
  country     String?
  city        String?
  description String?   @db.Text
  startDate   DateTime  @db.Date
  endDate     DateTime? @db.Date
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  site        Site?     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId      String?

  @@index([siteId], name: "education_site_constraint")
}

model Link {
  id        String   @id @default(cuid())
  name      String
  url       String
  alt       String?
  icon      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  siteId    String?

  site Site? @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId], name: "link_site_constraint")
}

model Language {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  siteId    String?

  site Site? @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId], name: "language_site_constraint")
}

model Theme {
  id                String   @id @default(cuid())
  name              String
  slug              String   @unique
  image             String?
  bgColor           String?
  textColor         String?
  titleColor        String?
  linkColor         String?
  accentColor       String?
  contrastColor     String?
  contrastTextColor String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  sites             Site[]
}
